Index: src/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.Serializable;\r\n\r\n/**\r\n * A class that creates and manages Player Object\r\n * @author Himal Sharma\r\n * @version 1.0\r\n */\r\npublic class Player implements Serializable\r\n{\r\n  private String firstName;\r\n  private String lastName;\r\n  private Date birthDate;\r\n  private Injury injury;\r\n  private Suspension suspension;\r\n  private String position;\r\n  private String startingOrNot;\r\n  private int shirtNumber;\r\n\r\n  /**\r\n   * A constructor that creates a Player object.\r\n   * @param firstName fist name of a player that is being created\r\n   * @param lastName last name of a player that is being created\r\n   * @param birthDate A Date object that is the birthdate of a player that is being created\r\n   * @param position position of a player that is being created\r\n   */\r\n  public Player(String firstName, String lastName, Date birthDate, String position)\r\n  {\r\n\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n    this.birthDate = birthDate;\r\n    this.position = position;\r\n    injury = null;\r\n    suspension = null;\r\n    startingOrNot=\"Not set\";\r\n  }\r\n\r\n  /**\r\n   * Gets either a player's status in active squad at a moment.\r\n   * @return the status of player in active squad\r\n   */\r\n  public String getStartingOrNot()\r\n  {\r\n    return startingOrNot;\r\n  }\r\n\r\n  /**\r\n   * Sets the status of a player in active squad.\r\n   * @param startingOrNot the status of player in active squad\r\n   */\r\n  public void setStartingOrNot(String startingOrNot)\r\n  {\r\n    this.startingOrNot = startingOrNot;\r\n  }\r\n\r\n  /**\r\n   * Sets/changes the shirtNumber of a Player object.\r\n   * @param shirtNumber the shirtnumber to change or add\r\n   */\r\n  public void setShirtNumber(int shirtNumber)\r\n  {\r\n    this.shirtNumber = shirtNumber;\r\n  }\r\n  /**\r\n   * Sets/changes the position of a Player object.\r\n   * @param position the position to change or add\r\n   */\r\n  public void setPosition(String position)\r\n  {\r\n    this.position = position;\r\n  }\r\n\r\n  /**\r\n   * Adds/changes Injury object to Player object\r\n   * @param injury Injury object to add on the Player object\r\n   */\r\n  public void setInjury(Injury injury)\r\n  {\r\n    this.injury = injury;\r\n  }\r\n  /**\r\n   * Adds/changes Suspension object to Player object\r\n   * @param suspension Suspension object to add on the Player object\r\n   */\r\n  public void setSuspension(Suspension suspension)\r\n  {\r\n    this.suspension = suspension;\r\n  }\r\n\r\n  /**\r\n   * Gets the first name from a Player Object.\r\n   * @return the first name of a Player.\r\n   */\r\n  public String getFirstName()\r\n  {\r\n    return firstName;\r\n  }\r\n\r\n  /**\r\n   * Gets the last name from a Player object.\r\n   * @return the last name of a Player\r\n   */\r\n  public String getLastName()\r\n  {\r\n    return lastName;\r\n  }\r\n  /**\r\n   * Gets the shirt number from a Player object.\r\n   * @return the shirt number of a Player\r\n   */\r\n  public int getShirtNumber()\r\n  {\r\n    return shirtNumber;\r\n  }\r\n  /**\r\n   * Gets the Date object storing the birth date from a Player object.\r\n   * @return  Date object storing birth date of a Player\r\n   */\r\n  public Date getBirthDate()\r\n  {\r\n    return birthDate;\r\n  }\r\n\r\n  public Injury getInjury()\r\n  {\r\n    return injury;\r\n  }\r\n\r\n  public String getPosition()\r\n  {\r\n    return position;\r\n  }\r\n  public Suspension getSuspension()\r\n  {\r\n    return suspension;\r\n  }\r\n\r\n  public void removeInjury()\r\n  {\r\n    injury = null;\r\n  }\r\n  public void removeSuspension()\r\n  {\r\n    suspension=null;\r\n  }\r\n\r\n  /**\r\n   * Compares a provided object to a Player object\r\n   * @param obj an object to be compared with the Player object\r\n   * @return return true if the given object is Player object that has all the attributes equal to the Player , else returns false\r\n   */\r\n  public boolean equals(Object obj)\r\n  {\r\n    if (!(obj instanceof Player))\r\n    {\r\n      return false;\r\n    }\r\n    else\r\n    {\r\n      Player temp = (Player) obj;\r\n      return  temp.firstName.equals(firstName) && temp.lastName.equals(lastName)\r\n          && temp.birthDate.equals(birthDate) && temp.position.equals(position);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets first and last name of a Player object in String.\r\n   * @return  first and last name of a Player object in String\r\n   */\r\n\r\n  public String toString()\r\n  {\r\n    return firstName + \" \" + lastName;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Player.java	(revision a062d6718dfe232f221c052a8acf8099d12e682d)
+++ src/Player.java	(date 1622320459503)
@@ -1,10 +1,12 @@
 import java.io.Serializable;
 
+
 /**
  * A class that creates and manages Player Object
  * @author Himal Sharma
  * @version 1.0
  */
+
 public class Player implements Serializable
 {
   private String firstName;
Index: src/PlayerList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.Serializable;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A class containing a list of Player objects.\r\n * @author Sachin Baral\r\n * @verrsion 1.0\r\n */\r\npublic class PlayerList implements Serializable\r\n{\r\n  private ArrayList<Player> playerList;\r\n\r\n  /**\r\n   * No-argument constructor initializing the PlayerList.\r\n   */\r\n  public PlayerList()\r\n  {\r\n    playerList = new ArrayList<Player>();\r\n  }\r\n\r\n  /**\r\n   * Calculates the size of size.\r\n   * @return the size of the List.\r\n   */\r\n  public int size()\r\n  {\r\n    return playerList.size();\r\n  }\r\n  /**\r\n   * Adds a Player to the List.\r\n   * @param player the player to add to the List.\r\n   */\r\n  public  void add(Player player)\r\n  {\r\n    playerList.add(player);\r\n  }\r\n\r\n  /**\r\n   * Gets a player object from position index from the list.\r\n   * @param index the position in the list of the Player object\r\n   * @return the Player at index if one exists , else null\r\n   */\r\n  public Player get(int index)\r\n  {\r\n   if (index<playerList.size())\r\n   {\r\n     return playerList.get(index);\r\n   }\r\n   else\r\n   {\r\n     return null;\r\n   }\r\n  }\r\n\r\n  /**\r\n   * Removes a Player object equal to given Player object if one exists.\r\n   * @param player the Player in the list to remove\r\n   */\r\n\r\n  public void removePlayer(Player player)\r\n  {\r\n    ArrayList<Player> temp = new ArrayList<>();\r\n    for (int i=0; i<playerList.size();i++)\r\n    {\r\n      if (!playerList.get(i).equals(player))\r\n      {\r\n        temp.add(playerList.get(i));\r\n      }\r\n\r\n    }\r\n    playerList= temp;\r\n  }\r\n\r\n  /**\r\n   * Gets all the Player object as a String.\r\n   * @return all the Player object as a String\r\n   */\r\n  public String toString()\r\n  {\r\n    String temp = \"\";\r\n    for (int i = 0; i < playerList.size(); i++)\r\n    {\r\n      temp += playerList.get(i) + \"\\n\";\r\n    }\r\n    return temp;\r\n  }\r\n\r\n  /**\r\n   * Gets Shirt Numbers of all Player object in the list as a String.\r\n   * @return all the Shirt numbers of all Player object in the list\r\n   */\r\n  public String getShirtNumbers()\r\n  {\r\n    String temp = \"\";\r\n    for (int i = 0; i < playerList.size(); i++)\r\n    {\r\n      temp += playerList.get(i).getShirtNumber()+\"\\n\";\r\n    }\r\n    return temp;\r\n  }\r\n  /**\r\n   * Gets Positions of all Player object in the list as a String.\r\n   * @return all the Positions of all Player object in the list\r\n   */\r\n  public String getAllPositions()\r\n  {\r\n    String temp = \"\";\r\n    for (int i = 0; i < playerList.size(); i++)\r\n    {\r\n      temp += playerList.get(i).getPosition()+\"\\n\";\r\n    }\r\n    return temp;\r\n  }\r\n  /**\r\n   * Gets Injury date of all Player object in the list as a String.\r\n   * @return all the Injury Date of all Player object in the list\r\n   */\r\n\r\n  public String getInjuredDate()\r\n  {\r\n    String temp = \"\";\r\n    for (int i = 0; i < playerList.size(); i++)\r\n    {\r\n      temp += playerList.get(i).getInjury().getInjuryDate()+\"\\n\";\r\n    }\r\n    return temp;\r\n  }\r\n  /**\r\n   * Gets Expected return Date of all Player object in the list as a String.\r\n   * @return all the expected return date of all Player object in the list\r\n   */\r\n  public String getExpectedReturnDate()\r\n  {\r\n    String temp = \"\";\r\n    for (int i = 0; i < playerList.size(); i++)\r\n    {\r\n      temp += playerList.get(i).getInjury().getExpectedReturnDate()+\"\\n\";\r\n    }\r\n    return temp;\r\n  }\r\n  /**\r\n   * Gets no of games suspended of all Player object in the list as a String.\r\n   * @return no of games suspended of all Player object in the list\r\n   */\r\n  public String getNoOfGamesSuspended()\r\n  {\r\n    String temp = \"\";\r\n    for (int i = 0; i < playerList.size(); i++)\r\n    {\r\n      temp += playerList.get(i).getSuspension().getNumberOfGamesSuspended()+\"\\n\";\r\n    }\r\n    return temp;\r\n  }\r\n  /**\r\n   * Gets Birth Date of all Player object in the list as a String.\r\n   * @return Birth Date of all Player object in the list\r\n   */\r\n  public String getBirthDate()\r\n  {\r\n    String temp = \"\";\r\n    for (int i = 0; i < playerList.size(); i++)\r\n    {\r\n      temp += playerList.get(i).getBirthDate()+\"\\n\";\r\n    }\r\n    return temp;\r\n  }\r\n  }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/PlayerList.java	(revision a062d6718dfe232f221c052a8acf8099d12e682d)
+++ src/PlayerList.java	(date 1622321326436)
@@ -82,7 +82,10 @@
     {
       temp += playerList.get(i) + "\n";
     }
+
     return temp;
+
+
   }
 
   /**
Index: src/Match.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.Serializable;\r\n\r\n/**\r\n * An abstract class that initialize and manage Match object\r\n * @author Bartosz Zielinski\r\n */\r\npublic abstract class Match implements Serializable\r\n{\r\n  private String opponentTeam;\r\n  private Date matchDate;\r\n  private Time startTime;\r\n  private boolean isHomeMatch;\r\n  private String result;\r\n\r\n  /**\r\n   * A constructor that creates a Match object.\r\n   * @param opponentTeam the team to face in a game\r\n   * @param matchDate Date object that stores the date when match is happening\r\n   * @param startTime Time object that stores the time when the match is starting\r\n   * @param isHomeMatch boolean (true if the game is home game) else false\r\n   */\r\n  public Match(String opponentTeam, Date matchDate, Time startTime,\r\n      boolean isHomeMatch)\r\n  {\r\n    this.opponentTeam = opponentTeam;\r\n    this.matchDate = matchDate;\r\n    this.startTime = startTime;\r\n    this.isHomeMatch = isHomeMatch;\r\n    this.result=\"\";\r\n  }\r\n\r\n  /**\r\n   * Sets/change the result of the Match\r\n   * @param result the result of the match\r\n   */\r\n  public void setResult(String result)\r\n  {\r\n    this.result = result;\r\n  }\r\n\r\n  /**\r\n   * Gets the date of the match\r\n   * @return Date object inside the match\r\n   */\r\n  public Date getMatchDate()\r\n  {\r\n    return matchDate;\r\n  }\r\n\r\n  /**\r\n   * Gets the opponent Team of the match\r\n   * @return opponentTeam of the Match\r\n   */\r\n\r\n  public String getOpponentTeam()\r\n  {\r\n    return opponentTeam;\r\n  }\r\n\r\n  /**\r\n   * Gets the starting time of the match\r\n   * @return Time object of match\r\n   */\r\n\r\n  public Time getStartTime()\r\n  {\r\n    return startTime;\r\n  }\r\n\r\n  /**\r\n   * Gets the result of the match\r\n   * @return result of the Match object\r\n   */\r\n  public String getResult()\r\n  {\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Compares given object with the Match\r\n   * @param obj the object to compare with the match\r\n   * @return boolean (true if the given object is a Match object with all equal attributes), else false\r\n   */\r\n\r\n  public boolean equals(Object obj)\r\n  {\r\n    if (!(obj instanceof Match))\r\n    {\r\n      return false;\r\n    }\r\n    else\r\n    {\r\n      Match temp = (Match) obj;\r\n      return temp.isHomeMatch =\r\n          isHomeMatch && temp.opponentTeam\r\n              .equals(opponentTeam)\r\n              && temp.matchDate.equals(matchDate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * An abstract method to pass that gets the type of match.\r\n   * @return the type of the match i.e LeagueMatch, CupMatch or FriendlyMatch\r\n   */\r\n  public abstract String matchType();\r\n\r\n  /**\r\n   * A method for returning the information of the Match in String.\r\n   * @return all the important attributes in readable String format\r\n   */\r\n  public String toString()\r\n  {\r\n    return opponentTeam;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Match.java	(revision a062d6718dfe232f221c052a8acf8099d12e682d)
+++ src/Match.java	(date 1622320459576)
@@ -27,6 +27,8 @@
     this.startTime = startTime;
     this.isHomeMatch = isHomeMatch;
     this.result="";
+
+
   }
 
   /**
Index: src/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javafx.fxml.FXML;\r\nimport javafx.scene.control.*;\r\n\r\nimport javafx.event.ActionEvent;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\n/**\r\n * @author Sachin Baral\r\n */\r\npublic class Controller\r\n{\r\n  @FXML private TextArea allPlayersBirthdate;\r\n  @FXML private Button updatePlayers;\r\n  @FXML private Button savePosition;\r\n  @FXML private Button createPlayer;\r\n  @FXML private Button changeShirtNumber;\r\n  @FXML private Button createMatch;\r\n  @FXML private Button upcomingMatchesUpdate;\r\n  @FXML private Button addInjury;\r\n  @FXML private Button removeInjury;\r\n  @FXML private TextField deletePlayerFirstName;\r\n  @FXML private TextField deletePlayerLastName;\r\n  @FXML private ComboBox<Player> deletePlayerChoosePlayer;\r\n  @FXML private Button deletePlayer;\r\n  @FXML private TextArea allPlayersName;\r\n  @FXML private TextArea allPlayersPosition;\r\n  @FXML private TextArea allPlayersShirtNumber;\r\n  @FXML private ComboBox<Player> comboBoxShirtNo;\r\n  @FXML private Spinner spinnerShirtNo;\r\n  @FXML private ComboBox<Player> comboBoxPosition;\r\n  @FXML private TextField textFieldPosition;\r\n  @FXML private TextField createPlayerFirstName;\r\n  @FXML private TextField createPlayerLastName;\r\n  @FXML private TextField createPlayerPosition;\r\n  @FXML private Spinner createPlayerShirtNumber;\r\n  @FXML private TextArea upcomingMatchesOpponents;\r\n  @FXML private TextArea upcomingMatchesDates;\r\n  @FXML private TextArea upcomingMatchesTimes;\r\n  @FXML private TextArea upcomingMatchesMatchType;\r\n  @FXML private TextArea previousMatchesOpponents;\r\n  @FXML private TextArea previousMatchesDates;\r\n  @FXML private TextArea previousMatchesTimes;\r\n  @FXML private TextArea previousMatchesMatchType;\r\n  @FXML private Button previousMatchesUpdate;\r\n  @FXML private DatePicker createMatchDate;\r\n  @FXML private TextField createMatchOpponent;\r\n  @FXML private RadioButton createMatchHome;\r\n  @FXML private RadioButton createMatchAway;\r\n  @FXML private RadioButton createMatchLeague;\r\n  @FXML private RadioButton createMatchCup;\r\n  @FXML private RadioButton createMatchFriendly;\r\n  @FXML private Spinner createMatchHour;\r\n  @FXML private Spinner createMatchMinute;\r\n  @FXML private TextArea allInjuryName;\r\n  @FXML private Button allInjuryUpdate;\r\n  @FXML private TextArea allInjuryInjuredDate;\r\n  @FXML private TextArea allInjuryExpectedReturnDate;\r\n  @FXML private DatePicker addInjuryInjuryDate;\r\n  @FXML private DatePicker addInjuryExpectedReturnDate;\r\n  @FXML private ComboBox<Player> addInjuryChoosePlayer;\r\n  @FXML private TextField addInjuryFirstName;\r\n  @FXML private TextField addInjuryLastName;\r\n  @FXML private ComboBox<Player> removeInjuryChoosePlayer;\r\n  @FXML private TextField removeInjuryFirstName;\r\n  @FXML private TextField removeInjuryLastName;\r\n  @FXML private TextField changeShirtNumberFirstName;\r\n  @FXML private TextField changeShirtNumberLastName;\r\n  @FXML private TextField changePositionFirstName;\r\n  @FXML private TextField changePositionLastName;\r\n  @FXML private DatePicker createPlayerDatePicker;\r\n  @FXML private Button addSuspension;\r\n  @FXML private TextArea suspendedPlayerNames;\r\n  @FXML private TextArea suspendedPlayerNoOfGames;\r\n  @FXML private Button suspendedUpdate;\r\n  @FXML private TextField addSuspendedFirstName;\r\n  @FXML private TextField addSuspendedLastName;\r\n  @FXML private Spinner addSuspendedNumberOfGamesSuspended;\r\n  @FXML private ComboBox<Player> addSuspendedComboBox;\r\n  @FXML private TextField removeSuspensionFirstName;\r\n  @FXML private TextField removeSuspensionLastName;\r\n  @FXML private ComboBox<Player> removeSuspensionComboBox;\r\n  @FXML private Button removeSuspension;\r\n  @FXML private TextArea allStartersPlayers;\r\n  @FXML private TextArea allStartersPosition;\r\n  @FXML private TextField addStarterFirstName;\r\n  @FXML private TextField addStarterLastName;\r\n  @FXML private ComboBox<Player> addStarterComboBox;\r\n  @FXML private Button addStarter;\r\n  @FXML private TextField removeStarterFirstName;\r\n  @FXML private TextField removeStarterLastName;\r\n  @FXML private ComboBox<Player> removeStarterComboBox;\r\n  @FXML private Button removeStarter;\r\n  @FXML private TextArea allSubstitutePlayers;\r\n  @FXML private TextArea allSubstitutePosition;\r\n  @FXML private TextField addSubstituteFirstName;\r\n  @FXML private TextField addSubstituteLastName;\r\n  @FXML private ComboBox<Player> addSubstituteComboBox;\r\n  @FXML private Button addSubstitute;\r\n  @FXML private TextField removeSubstituteFirstName;\r\n  @FXML private TextField removeSubstituteLastName;\r\n  @FXML private ComboBox<Player> removeSubstituteComboBox;\r\n  @FXML private Button removeSubstitute;\r\n  @FXML private TextArea allStartersShirtNumber;\r\n  @FXML private TextArea allSubstituteShirtNumber;\r\n  @FXML private TextField deleteMatchOpponent;\r\n  @FXML private DatePicker deleteMatchDate;\r\n  @FXML private Button deleteMatch;\r\n  @FXML private TextArea previousMatchesResult;\r\n  @FXML private TextField setResultOpponent;\r\n @FXML private DatePicker setResultDate;\r\n  @FXML private TextField setResultResult;\r\n  @FXML private Button setResult;\r\n\r\n  private ModelManager modelManager;\r\n\r\n  /**\r\n   * A list of methods to run when the program starts\r\n   */\r\n  public void initialize()\r\n  {\r\n    modelManager = new ModelManager(\"Matches.bin\", \"Players.bin\");\r\n    spinnerShirtNo.setValueFactory(\r\n        new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 99));\r\n    createPlayerShirtNumber.setValueFactory(\r\n        new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 99));\r\n    createMatchHour.setValueFactory(\r\n        new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 23));\r\n    createMatchMinute.setValueFactory(\r\n        new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 59));\r\n    addSuspendedNumberOfGamesSuspended.setValueFactory(\r\n        new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 10));\r\n    updatePlayersArea();\r\n    updateEveryBox();\r\n    allStarters();\r\n    allSubstitutes();\r\n    allInjuries();\r\n    allSuspension();\r\n    allSubstitutes();\r\n    updatePreviousMatchesArea();\r\n    updateUpcomingMatchesArea();\r\n\r\n  }\r\n\r\n  private void updatePlayersArea()\r\n  {\r\n\r\n    PlayerList players = modelManager.getAllPlayers();\r\n    allPlayersName.setText(players.toString());\r\n    allPlayersShirtNumber.setText(players.getShirtNumbers());\r\n    allPlayersPosition.setText(players.getAllPositions());\r\n    allPlayersBirthdate.setText(players.getBirthDate());\r\n  }\r\n\r\n\r\n  private void updateAllPlayersBox()\r\n  {\r\n    int currentIndex = comboBoxShirtNo.getSelectionModel().getSelectedIndex();\r\n\r\n    comboBoxShirtNo.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      comboBoxShirtNo.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && comboBoxShirtNo.getItems().size() > 0)\r\n    {\r\n      comboBoxShirtNo.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      comboBoxShirtNo.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateChangePositionBox()\r\n  {\r\n    int currentIndex = comboBoxPosition.getSelectionModel().getSelectedIndex();\r\n\r\n    comboBoxPosition.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      comboBoxPosition.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && comboBoxPosition.getItems().size() > 0)\r\n    {\r\n      comboBoxPosition.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      comboBoxPosition.getSelectionModel().select(currentIndex);\r\n    }\r\n\r\n  }\r\n\r\n  private void updateDeletePlayerComboBox()\r\n  {\r\n    int currentIndex = deletePlayerChoosePlayer.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    deletePlayerChoosePlayer.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      deletePlayerChoosePlayer.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && deletePlayerChoosePlayer.getItems().size() > 0)\r\n    {\r\n      deletePlayerChoosePlayer.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      deletePlayerChoosePlayer.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateAddSuspendedComboBox()\r\n  {\r\n    int currentIndex = addSuspendedComboBox.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    addSuspendedComboBox.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      addSuspendedComboBox.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && addSuspendedComboBox.getItems().size() > 0)\r\n    {\r\n      addSuspendedComboBox.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      addSuspendedComboBox.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateAddInjuryComboBox()\r\n  {\r\n    int currentIndex = addInjuryChoosePlayer.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    addInjuryChoosePlayer.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      addInjuryChoosePlayer.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && addInjuryChoosePlayer.getItems().size() > 0)\r\n    {\r\n      addInjuryChoosePlayer.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      addInjuryChoosePlayer.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateRemoveInjuryComboBox()\r\n  {\r\n    int currentIndex = removeInjuryChoosePlayer.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    removeInjuryChoosePlayer.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllInjuredPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      removeInjuryChoosePlayer.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && removeInjuryChoosePlayer.getItems().size() > 0)\r\n    {\r\n      removeInjuryChoosePlayer.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      removeInjuryChoosePlayer.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateRemoveSuspendedComboBox()\r\n  {\r\n    int currentIndex = removeSuspensionComboBox.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    removeSuspensionComboBox.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllSuspendedPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      removeSuspensionComboBox.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && removeSuspensionComboBox.getItems().size() > 0)\r\n    {\r\n      removeSuspensionComboBox.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      removeSuspensionComboBox.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateAddStarterComboBox()\r\n  {\r\n    int currentIndex = addStarterComboBox.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    addStarterComboBox.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllAvailablePlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      addStarterComboBox.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && addStarterComboBox.getItems().size() > 0)\r\n    {\r\n      addStarterComboBox.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      addStarterComboBox.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateRemoveStarterComboBox()\r\n  {\r\n    int currentIndex = removeStarterComboBox.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    removeStarterComboBox.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllStartingPlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      removeStarterComboBox.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && removeStarterComboBox.getItems().size() > 0)\r\n    {\r\n      removeStarterComboBox.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      removeStarterComboBox.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateAddSubstituteComboBox()\r\n  {\r\n    int currentIndex = addSubstituteComboBox.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    addSubstituteComboBox.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllAvailablePlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      addSubstituteComboBox.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && addSubstituteComboBox.getItems().size() > 0)\r\n    {\r\n      addSubstituteComboBox.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      addSubstituteComboBox.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n  private void updateRemoveSubstituteComboBox()\r\n  {\r\n    int currentIndex = removeSubstituteComboBox.getSelectionModel()\r\n        .getSelectedIndex();\r\n\r\n    removeSubstituteComboBox.getItems().clear();\r\n\r\n    PlayerList players = modelManager.getAllSubstitutePlayers();\r\n    for (int i = 0; i < players.size(); i++)\r\n    {\r\n      removeSubstituteComboBox.getItems().add(players.get(i));\r\n    }\r\n\r\n    if (currentIndex == -1 && removeSubstituteComboBox.getItems().size() > 0)\r\n    {\r\n      removeSubstituteComboBox.getSelectionModel().select(0);\r\n    }\r\n    else\r\n    {\r\n      removeSubstituteComboBox.getSelectionModel().select(currentIndex);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  private void updateEveryBox()\r\n  {\r\n    updateAllPlayersBox();\r\n    updateChangePositionBox();\r\n    updateAddInjuryComboBox();\r\n    updateAddStarterComboBox();\r\n    updateAddSubstituteComboBox();\r\n    updateAddSuspendedComboBox();\r\n    updateRemoveInjuryComboBox();\r\n    updateRemoveStarterComboBox();\r\n    updateRemoveStarterComboBox();\r\n    updateRemoveSubstituteComboBox();\r\n    updateRemoveSuspendedComboBox();\r\n    updateDeletePlayerComboBox();\r\n\r\n  }\r\n\r\n  private void changeShirtNo()\r\n  {\r\n    String firstName = changeShirtNumberFirstName.getText();\r\n    String lastName = changeShirtNumberLastName.getText();\r\n    int shirtNumber = (int) spinnerShirtNo.getValue();\r\n    modelManager.changeShirtNumber(firstName, lastName, shirtNumber);\r\n    changeShirtNumberFirstName.clear();\r\n    changeShirtNumberLastName.clear();\r\n    updateEveryBox();\r\n    updatePlayersArea();\r\n  }\r\n\r\n  private void changePosition()\r\n  {\r\n    String firstName = changePositionFirstName.getText();\r\n    String lastName = changePositionLastName.getText();\r\n    String position = textFieldPosition.getText();\r\n    modelManager.changePosition(firstName, lastName, position);\r\n    changePositionFirstName.clear();\r\n    changePositionLastName.clear();\r\n    updateEveryBox();\r\n    updatePlayersArea();\r\n  }\r\n\r\n  private void createPlayer()\r\n  {\r\n    String firstName = createPlayerFirstName.getText();\r\n    String lastName = createPlayerLastName.getText();\r\n    String position = createPlayerPosition.getText();\r\n    LocalDate temp = createPlayerDatePicker.getValue();\r\n    int day = temp.getDayOfMonth();\r\n    int month = temp.getMonthValue();\r\n    int year = temp.getYear();\r\n    Date newDate = new Date(day, month, year);\r\n    int shirtNumber = (int) createPlayerShirtNumber.getValue();\r\n    modelManager.addPlayer(new Player(firstName, lastName, newDate, position));\r\n    modelManager.changeShirtNumber(firstName, lastName, shirtNumber);\r\n    createPlayerFirstName.clear();\r\n    createPlayerLastName.clear();\r\n    createPlayerPosition.clear();\r\n    updateEveryBox();\r\n    updatePlayersArea();\r\n  }\r\n\r\n  private void deletePlayer()\r\n  {\r\n    String firstName = deletePlayerFirstName.getText();\r\n    String lastName = deletePlayerLastName.getText();\r\n    modelManager.removePlayer(firstName, lastName);\r\n    deletePlayerFirstName.clear();\r\n    deletePlayerLastName.clear();\r\n    updatePlayersArea();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void updateUpcomingMatchesArea()\r\n  {\r\n    MatchList matches = modelManager.getALlUpcomingMatches();\r\n    upcomingMatchesOpponents.setText(matches.getAllOpponents());\r\n    upcomingMatchesTimes.setText(matches.getAllTimes());\r\n    upcomingMatchesDates.setText(matches.getAllDates());\r\n    upcomingMatchesMatchType.setText(matches.getAllMatchesTypes());\r\n\r\n  }\r\n\r\n  private void updatePreviousMatchesArea()\r\n  {\r\n    MatchList matches = modelManager.getALlPreviousMatches();\r\n    previousMatchesOpponents.setText(matches.getAllOpponents());\r\n    previousMatchesTimes.setText(matches.getAllTimes());\r\n    previousMatchesDates.setText(matches.getAllDates());\r\n    previousMatchesMatchType.setText(matches.getAllMatchesTypes());\r\n    previousMatchesResult.setText(matches.getAllResults());\r\n  }\r\n\r\n  private void createMatch()\r\n  {\r\n    LocalDate temp = createMatchDate.getValue();\r\n    int day = temp.getDayOfMonth();\r\n    int month = temp.getMonthValue();\r\n    int year = temp.getYear();\r\n    Date newDate = new Date(day, month, year);\r\n    String opponent = createMatchOpponent.getText();\r\n    int hour = (int) createMatchHour.getValue();\r\n    int minute = (int) createMatchMinute.getValue();\r\n    int second = 0;\r\n    Time newTime = new Time(hour, minute, second);\r\n    boolean isHomeMatch = false;\r\n    if (createMatchHome.isSelected())\r\n    {\r\n      isHomeMatch = true;\r\n    }\r\n    if (createMatchAway.isSelected())\r\n    {\r\n      isHomeMatch = false;\r\n    }\r\n    if (createMatchLeague.isSelected())\r\n    {\r\n      modelManager.addLeagueMatch(\r\n          new LeagueMatch(opponent, newDate, newTime, isHomeMatch));\r\n    }\r\n    if (createMatchCup.isSelected())\r\n    {\r\n      modelManager\r\n          .addCupMatch(new CupMatch(opponent, newDate, newTime, isHomeMatch));\r\n    }\r\n    if (createMatchFriendly.isSelected())\r\n    {\r\n      modelManager.addFriendlyMatch(\r\n          new FriendlyMatch(opponent, newDate, newTime, isHomeMatch));\r\n    }\r\n    createMatchOpponent.clear();\r\n    updateUpcomingMatchesArea();\r\n    updatePreviousMatchesArea();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void removeMatch()\r\n  {\r\n    LocalDate temp = deleteMatchDate.getValue();\r\n    int day = temp.getDayOfMonth();\r\n    int month = temp.getMonthValue();\r\n    int year = temp.getYear();\r\n    Date tempDate = new Date(day,month,year);\r\n    String opponentTeam = deleteMatchOpponent.getText();\r\n    modelManager.removeMatch(opponentTeam,tempDate);\r\n    deleteMatchOpponent.clear();\r\n    updateUpcomingMatchesArea();\r\n    updatePreviousMatchesArea();\r\n    updateEveryBox();\r\n  }\r\n  private void setResult()\r\n  {\r\n    LocalDate temp = setResultDate.getValue();\r\n    int day = temp.getDayOfMonth();\r\n    int month = temp.getMonthValue();\r\n    int year = temp.getYear();\r\n    Date tempDate = new Date(day,month,year);\r\n    String opponentTeam = setResultOpponent.getText();\r\n    String result = setResultResult.getText();\r\n    modelManager.setResult(opponentTeam,tempDate,result);\r\n    setResultOpponent.clear();\r\n    setResultResult.clear();\r\n    updatePreviousMatchesArea();\r\n    updateEveryBox();\r\n  }\r\n\r\n\r\n  private void allInjuries()\r\n  {\r\n    PlayerList allInjuries = modelManager.getAllInjuredPlayers();\r\n    allInjuryName.setText(allInjuries.toString());\r\n    allInjuryInjuredDate.setText(allInjuries.getInjuredDate());\r\n    allInjuryExpectedReturnDate.setText(allInjuries.getExpectedReturnDate());\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void addInjury()\r\n  {\r\n    String firstName = addInjuryFirstName.getText();\r\n    String lastName = addInjuryLastName.getText();\r\n\r\n    LocalDate temp1 = addInjuryInjuryDate.getValue();\r\n    int d1 = temp1.getDayOfMonth();\r\n    int m1 = temp1.getMonthValue();\r\n    int y1 = temp1.getYear();\r\n    Date injuredDate = new Date(d1, m1, y1);\r\n\r\n    LocalDate temp2 = addInjuryExpectedReturnDate.getValue();\r\n    int d2 = temp2.getDayOfMonth();\r\n    int m2 = temp2.getMonthValue();\r\n    int y2 = temp2.getYear();\r\n    Date expectedReturnDate = new Date(d2, m2, y2);\r\n\r\n    Injury injury = new Injury(injuredDate, expectedReturnDate);\r\n    modelManager.addInjury(firstName, lastName, injury);\r\n    addInjuryFirstName.clear();\r\n    addInjuryLastName.clear();\r\n    allInjuries();\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void allSuspension()\r\n  {\r\n    PlayerList allSuspendedPlayers = modelManager.getAllSuspendedPlayers();\r\n    suspendedPlayerNames.setText(allSuspendedPlayers.toString());\r\n    suspendedPlayerNoOfGames\r\n        .setText(allSuspendedPlayers.getNoOfGamesSuspended());\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void removeInjury()\r\n  {\r\n    String firstName = removeInjuryFirstName.getText();\r\n    String lastName = removeInjuryLastName.getText();\r\n\r\n    modelManager.removeInjury(firstName, lastName);\r\n    removeInjuryLastName.clear();\r\n    removeInjuryFirstName.clear();\r\n    allInjuries();\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void addSuspension()\r\n  {\r\n    String firstName = addSuspendedFirstName.getText();\r\n    String lastName = addSuspendedLastName.getText();\r\n    int noOfGamesSuspended = (int) addSuspendedNumberOfGamesSuspended\r\n        .getValue();\r\n    Suspension suspension = new Suspension(noOfGamesSuspended);\r\n    modelManager.addSuspension(firstName, lastName, suspension);\r\n    addSuspendedFirstName.clear();\r\n    addSuspendedLastName.clear();\r\n    allSuspension();\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void removeSuspension()\r\n  {\r\n    String firstName = removeSuspensionFirstName.getText();\r\n    String lastName = removeSuspensionLastName.getText();\r\n    modelManager.removeSuspension(firstName, lastName);\r\n    removeSuspensionFirstName.clear();\r\n    removeSuspensionLastName.clear();\r\n    allSuspension();\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void allStarters()\r\n  {\r\n    PlayerList allStarters = modelManager.getAllStartingPlayers();\r\n    allStartersPlayers.setText(allStarters.toString());\r\n    allStartersShirtNumber.setText(allStarters.getShirtNumbers());\r\n    allStartersPosition.setText(allStarters.getAllPositions());\r\n    updateAllPlayersBox();\r\n  }\r\n\r\n  private void addStarter()\r\n  {\r\n    String firstName = addStarterFirstName.getText();\r\n    String lastName = addStarterLastName.getText();\r\n    modelManager.addStartingPlayers(firstName, lastName);\r\n    addStarterFirstName.clear();\r\n    addStarterLastName.clear();\r\n    allStarters();\r\n    allSubstitutes();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void removeStarter()\r\n  {\r\n    String firstName = removeStarterFirstName.getText();\r\n    String lastName = removeStarterLastName.getText();\r\n    modelManager.removeStartingPlayers(firstName, lastName);\r\n    removeStarterFirstName.clear();\r\n    removeStarterLastName.clear();\r\n    allStarters();\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void allSubstitutes()\r\n  {\r\n    PlayerList allSubstitutes = modelManager.getAllSubstitutePlayers();\r\n    allSubstitutePlayers.setText(allSubstitutes.toString());\r\n    allSubstituteShirtNumber.setText(allSubstitutes.getShirtNumbers());\r\n    allSubstitutePosition.setText(allSubstitutes.getAllPositions());\r\n    updateAllPlayersBox();\r\n  }\r\n\r\n  private void addSubstitute()\r\n  {\r\n    String firstName = addSubstituteFirstName.getText();\r\n    String lastName = addSubstituteLastName.getText();\r\n    modelManager.addSubstitutePlayers(firstName, lastName);\r\n    addSubstituteFirstName.clear();\r\n    addStarterLastName.clear();\r\n    allSubstitutes();\r\n    allStarters();\r\n    updateEveryBox();\r\n  }\r\n\r\n  private void removeSubstitute()\r\n  {\r\n    String firstName = removeSubstituteFirstName.getText();\r\n    String lastName = removeSubstituteLastName.getText();\r\n    modelManager.removeSubstitutePlayers(firstName, lastName);\r\n    removeSubstituteFirstName.clear();\r\n    removeStarterLastName.clear();\r\n    allSubstitutes();\r\n    updateAllPlayersBox();\r\n    updateEveryBox();\r\n  }\r\n\r\n  /**\r\n   * A handler that handles all the buttons and responsive functions in the GUI.\r\n   *\r\n   * @param e the action event\r\n   */\r\n  public void handler(ActionEvent e)\r\n  {\r\n    if (e.getSource() == updatePlayers)\r\n    {\r\n      updatePlayersArea();\r\n    }\r\n    if (e.getSource() == changeShirtNumber)\r\n    {\r\n      changeShirtNo();\r\n    }\r\n    if (e.getSource() == savePosition)\r\n    {\r\n      changePosition();\r\n      updatePlayersArea();\r\n    }\r\n    if (e.getSource() == upcomingMatchesUpdate)\r\n    {\r\n      updateUpcomingMatchesArea();\r\n    }\r\n    if (e.getSource() == createPlayer)\r\n    {\r\n      createPlayer();\r\n    }\r\n    if (e.getSource() == createMatch)\r\n    {\r\n      createMatch();\r\n    }\r\n    if (e.getSource() == allInjuryUpdate)\r\n    {\r\n      allInjuries();\r\n    }\r\n    if (e.getSource() == addInjury)\r\n    {\r\n      addInjury();\r\n    }\r\n    if (e.getSource() == removeInjury)\r\n    {\r\n      removeInjury();\r\n    }\r\n    if (e.getSource() == suspendedUpdate)\r\n    {\r\n      allSuspension();\r\n    }\r\n    if (e.getSource() == addSuspension)\r\n    {\r\n      addSuspension();\r\n    }\r\n    if (e.getSource() == removeSuspension)\r\n    {\r\n      removeSuspension();\r\n    }\r\n    if (e.getSource() == comboBoxShirtNo)\r\n    {\r\n      Player temp = comboBoxShirtNo.getSelectionModel().getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        changeShirtNumberFirstName.setText(temp.getFirstName());\r\n        changeShirtNumberLastName.setText(temp.getLastName());\r\n        changeShirtNumberFirstName.setEditable(false);\r\n        changeShirtNumberLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == comboBoxPosition)\r\n    {\r\n      Player temp = comboBoxPosition.getSelectionModel().getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        changePositionFirstName.setText(temp.getFirstName());\r\n        changePositionLastName.setText(temp.getLastName());\r\n        changePositionFirstName.setEditable(false);\r\n        changePositionLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == deletePlayerChoosePlayer)\r\n    {\r\n      Player temp = deletePlayerChoosePlayer.getSelectionModel()\r\n          .getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        deletePlayerFirstName.setText(temp.getFirstName());\r\n        deletePlayerLastName.setText(temp.getLastName());\r\n        deletePlayerFirstName.setEditable(false);\r\n        changePositionLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == addInjuryChoosePlayer)\r\n    {\r\n      Player temp = addInjuryChoosePlayer.getSelectionModel().getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        addInjuryFirstName.setText(temp.getFirstName());\r\n        addInjuryLastName.setText(temp.getLastName());\r\n        addInjuryFirstName.setEditable(false);\r\n        addInjuryLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == removeInjuryChoosePlayer)\r\n    {\r\n      Player temp = removeInjuryChoosePlayer.getSelectionModel()\r\n          .getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        removeInjuryFirstName.setText(temp.getFirstName());\r\n        removeInjuryLastName.setText(temp.getLastName());\r\n        removeInjuryFirstName.setEditable(false);\r\n        removeInjuryLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == addSuspendedComboBox)\r\n    {\r\n      Player temp = addSuspendedComboBox.getSelectionModel().getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        addSuspendedFirstName.setText(temp.getFirstName());\r\n        addSuspendedLastName.setText(temp.getLastName());\r\n        addSuspendedFirstName.setEditable(false);\r\n        addSuspendedLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == removeSuspensionComboBox)\r\n    {\r\n      Player temp = removeSuspensionComboBox.getSelectionModel()\r\n          .getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        removeSuspensionFirstName.setText(temp.getFirstName());\r\n        removeSuspensionLastName.setText(temp.getLastName());\r\n        removeSuspensionFirstName.setEditable(false);\r\n        removeSuspensionLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == addStarterComboBox)\r\n    {\r\n      Player temp = addStarterComboBox.getSelectionModel().getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        addStarterFirstName.setText(temp.getFirstName());\r\n        addStarterLastName.setText(temp.getLastName());\r\n        addStarterFirstName.setEditable(false);\r\n        addStarterLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == removeStarterComboBox)\r\n    {\r\n      Player temp = removeStarterComboBox.getSelectionModel().getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        removeStarterFirstName.setText(temp.getFirstName());\r\n        removeStarterLastName.setText(temp.getLastName());\r\n        removeStarterFirstName.setEditable(false);\r\n        removeStarterLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == addSubstituteComboBox)\r\n    {\r\n      Player temp = addSubstituteComboBox.getSelectionModel().getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        addSubstituteFirstName.setText(temp.getFirstName());\r\n        addSubstituteLastName.setText(temp.getLastName());\r\n        addSubstituteFirstName.setEditable(false);\r\n        addSubstituteLastName.setEditable(false);\r\n      }\r\n    }\r\n    if (e.getSource() == removeSubstituteComboBox)\r\n    {\r\n      Player temp = removeSubstituteComboBox.getSelectionModel()\r\n          .getSelectedItem();\r\n\r\n      if (temp != null)\r\n      {\r\n        removeSubstituteFirstName.setText(temp.getFirstName());\r\n        removeSubstituteLastName.setText(temp.getLastName());\r\n        removeSubstituteFirstName.setEditable(false);\r\n        removeSubstituteLastName.setEditable(false);\r\n      }\r\n    }\r\n\r\n    if (e.getSource() == addStarter)\r\n    {\r\n      addStarter();\r\n    }\r\n    if (e.getSource() == removeStarter)\r\n    {\r\n      removeStarter();\r\n    }\r\n    if (e.getSource() == addSubstitute)\r\n    {\r\n      addSubstitute();\r\n    }\r\n    if (e.getSource() == removeSubstitute)\r\n    {\r\n      removeSubstitute();\r\n    }\r\n    if (e.getSource() == deletePlayer)\r\n    {\r\n      deletePlayer();\r\n    }\r\n    if (e.getSource()==deleteMatch)\r\n    {\r\n      removeMatch();\r\n    }\r\n    if (e.getSource()==setResult)\r\n    {\r\n      setResult();\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller.java	(revision a062d6718dfe232f221c052a8acf8099d12e682d)
+++ src/Controller.java	(date 1622322408731)
@@ -3,9 +3,13 @@
 
 import javafx.event.ActionEvent;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.time.LocalDate;
 import java.time.format.DateTimeFormatter;
-
+import java.beans.XMLEncoder;
+import java.beans.XMLDecoder;
 /**
  * @author Sachin Baral
  */
@@ -143,6 +147,23 @@
 
   }
 
+  public void getallPlayerXml(String first, String last){
+    PlayerList players = modelManager.getAllPlayers();
+    String name = first +" "+ last;
+
+      try{
+        FileOutputStream fos = new FileOutputStream(new File("./Finalassignment/playername.xml"));
+        XMLEncoder  encoder = new XMLEncoder(fos);
+        encoder.writeObject(name);
+        encoder.close();
+        fos.close();
+      }catch (IOException ex)
+      {
+        ex.printStackTrace();
+      }
+
+  }
+
   private void updatePlayersArea()
   {
 
@@ -151,6 +172,7 @@
     allPlayersShirtNumber.setText(players.getShirtNumbers());
     allPlayersPosition.setText(players.getAllPositions());
     allPlayersBirthdate.setText(players.getBirthDate());
+
   }
 
 
@@ -467,6 +489,7 @@
     createPlayerPosition.clear();
     updateEveryBox();
     updatePlayersArea();
+    getallPlayerXml(firstName,lastName);
   }
 
   private void deletePlayer()
@@ -570,6 +593,16 @@
     setResultResult.clear();
     updatePreviousMatchesArea();
     updateEveryBox();
+
+    try{
+      FileOutputStream fos = new FileOutputStream(new File("./Finalassignment/las       tresult.xml"));
+      XMLEncoder  encoder = new XMLEncoder(fos);
+      encoder.writeObject(result);
+      encoder.close();
+      fos.close();
+    }catch (IOException ex){
+      ex.printStackTrace();
+    }
   }
 
 
Index: Players.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>��\u0000\u0005sr\u0000\nPlayerListkn\u000B\nTl>5\u0002\u0000\u0001L\u0000\nplayerListt\u0000\u0015Ljava/util/ArrayList;xpsr\u0000\u0013java.util.ArrayListx��\u001D��a�\u0003\u0000\u0001I\u0000\u0004sizexp\u0000\u0000\u0000\u0004w\u0004\u0000\u0000\u0000\u0004sr\u0000\u0006PlayerV��\u001B5 \\�\u0002\u0000\bI\u0000\u000BshirtNumberL\u0000\tbirthDatet\u0000\u0006LDate;L\u0000\tfirstNamet\u0000\u0012Ljava/lang/String;L\u0000\u0006injuryt\u0000\bLInjury;L\u0000\blastNameq\u0000~\u0000\u0007L\u0000\bpositionq\u0000~\u0000\u0007L\u0000\rstartingOrNotq\u0000~\u0000\u0007L\u0000\nsuspensiont\u0000\fLSuspension;xp\u0000\u0000\u0000\u0000sr\u0000\u0004Date곗;֧�S\u0002\u0000\u0003I\u0000\u0003dayI\u0000\u0005monthI\u0000\u0004yearxp\u0000\u0000\u0000\u0019\u0000\u0000\u0000\t\u0000\u0000\u0007�t\u0000\u0006Sachinpt\u0000\u0005Baralt\u0000\u0007Strikert\u0000\u0007Not setpsq\u0000~\u0000\u0005\u0000\u0000\u0000\u0000sq\u0000~\u0000\u000B\u0000\u0000\u0000\u001D\u0000\u0000\u0000\b\u0000\u0000\u0007�t\u0000\u000FCristian-Marianpt\u0000\u0004Radut\u0000\nMidfielderq\u0000~\u0000\u0010psq\u0000~\u0000\u0005\u0000\u0000\u0000\u0000sq\u0000~\u0000\u000B\u0000\u0000\u0000\u0006\u0000\u0000\u0000\f\u0000\u0000\u0007�t\u0000\u0004Emilpt\u0000\bVassilevt\u0000\u000BLeft Wingerq\u0000~\u0000\u0010psq\u0000~\u0000\u0005\u0000\u0000\u0000\u0000sq\u0000~\u0000\u000B\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u000B\u0000\u0000\u0007�t\u0000\u0007Bartoszpt\u0000\tZielenskit\u0000\nGoalKeeperq\u0000~\u0000\u0010px
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Players.bin	(revision a062d6718dfe232f221c052a8acf8099d12e682d)
+++ Players.bin	(date 1622289057570)
@@ -1,8 +1,10 @@
 �� sr 
 PlayerListkn
 Tl>5 L 
-playerListt Ljava/util/ArrayList;xpsr java.util.ArrayListx����a� I sizexp   w   sr PlayerV��5 \� I shirtNumberL 	birthDatet LDate;L 	firstNamet Ljava/lang/String;L injuryt LInjury;L lastNameq ~ L positionq ~ L 
+playerListt Ljava/util/ArrayList;xpsr java.util.ArrayListx����a� I sizexp   w   sr PlayerV��5 \� I shirtNumberL 	birthDatet LDate;L 	firstNamet Ljava/lang/String;L injuryt LInjury;L lastNameq ~ L positionq ~ L 
 startingOrNotq ~ L 
 suspensiont LSuspension;xp    sr Date곗;֧�S I dayI monthI yearxp      	  �t Sachinpt Baralt Strikert Not setpsq ~     sq ~         �t Cristian-Marianpt Radut 
 Midfielderq ~ psq ~     sq ~         �t Emilpt Vassilevt Left Wingerq ~ psq ~     sq ~         �t Bartoszpt 	Zielenskit 
-GoalKeeperq ~ px
\ No newline at end of file
+GoalKeeperq ~ psq ~    sq ~         �t Hhhpt ppt whatt Not setpsq ~    sq ~    
+     �t sexypt ladyt  t Not setpsq ~    sq ~    
+     �t secondpt testt  t Not setpx
\ No newline at end of file
Index: src/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\n\r\npublic class Test\r\n{\r\n\r\n  public static void main(String[] args) throws IOException\r\n  {\r\n    Date sachinDate= new Date(25,9,2002);\r\n    Date himalDate = new Date(02,5,1999);\r\n    Date bartoszdate = new Date(4,11,1998);\r\n    Date emilDate = new Date(6,12,1997);\r\n    Date marianDate = new Date(29,8,1996);\r\n    ModelManager modelManager = new ModelManager(\"Matches.bin\",\"Players.bin\");\r\n    PlayerList playerList= new PlayerList();\r\n    MatchList matchList = new MatchList();\r\n    Player player1 = new Player(\"Sachin\",\"Baral\",sachinDate,\"Striker\");\r\n    Player player2 = new Player(\"Cristian-Marian\",\"Radu\",marianDate,\"Midfielder\");\r\n    Player player3 = new Player(\"Emil\",\"Vassilev\",emilDate,\"Left Winger\");\r\n    Player player4 = new Player(\"Himal\",\"Sharma\",himalDate,\"Defender\");\r\n    Player player5 = new Player(\"Bartosz\",\"Zielenski\",bartoszdate,\"GoalKeeper\");\r\n    playerList.add(player1);\r\n    playerList.add(player2);\r\n    playerList.add(player3);\r\n    playerList.add(player4);\r\n    playerList.add(player5);\r\n    MyFileHandler.writeToBinaryFile(\"Players.bin\",playerList);\r\n   MyFileHandler.writeToBinaryFile(\"Matches.bin\",matchList);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Test.java	(revision a062d6718dfe232f221c052a8acf8099d12e682d)
+++ src/Test.java	(date 1622186357391)
@@ -1,4 +1,7 @@
 import java.io.IOException;
+import java.beans.XMLEncoder;
+import java.beans.XMLDecoder;
+import java.io.File;
 
 public class Test
 {
